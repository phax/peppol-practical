<!--

    Copyright (C) 2014-2015 Philip Helger (www.helger.com)
    philip[at]helger[dot]com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<p>
This page explains how to setup an OpenPEPPOL CIPA SMP from scratch.
SMP is the abbreviation for <em>Service Metadata Publisher</em> which is the decentralized
directory service of OpenPEPPOL.
SMPs are normally only operated by Service Providers and not by endpoints.
An SMP contains information about the endpoints of receivers - the URLs where to send the main
documents to.
The information within the SMP is structured by participant ID, document type ID and process ID.  
</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Table of contents</h3>
  </div>
  <div class="panel-body">
    <ol>
      <li><a href="#prerequisites">Prerequisites</a></li>
      <li><a href="#technical">Technical resources</a></li>
      <li><a href="#smpwebapp">smp-webapp</a> - SMP server application
        <ol>
          <li><a href="#configuring">Configuring the service</a></li>
          <li><a href="#publicapi">Public REST API</a></li>
          <li><a href="#modifyingapi">Modifying REST API</a></li>
          <li><a href="#security">Security considerations</a></li>
          <li><a href="#initialization">Initialization</a></li>
        </ol>
      </li>
      <li><a href="#smpclientlibrary">smp-client-library</a></li>
      <li><a href="#smpclientconsole">smp-client-console</a></li>
    </ol>
  </div>
</div>

<a name="prerequisites"></a>
<h2>Prerequisites</h2>
<p>
  Before you can start you need to have the following information in place:
</p>
<ol>
  <li>As the very first step you need to sign the TIAs (Transport Infrastructure Agreements) with 
      <a href="http://www.peppol.eu/about_peppol/copy_of_how-to-join">OpenPEPPOL AISBL</a></li>
  <li>Afterwards you need to apply for an <em>SMP certificate</em> at OpenPEPPOL. 
      This certificate is required to run the SMP.</li>
  <li>You should have a look at the 
      <a href="http://www.peppol.eu/ressource-library/technical-specifications/infrastructure-resources">official SMP specifications</a>.
      It is important to understand that the specifications only specify the reading access
      to an SMP but not the writing access. Nevertheless the implementation discussed here
      also contains the possibility to write new entries.</li>
  <li>You should be familiar with Java 1.6+</li>
  <li>Basic knowledge of a relational database (e.g. MySQL) is required</li>
  <li>Basic knowledge about Apache Tomcat (and optionally a web server) should be present</li>    
</ol>

<a name="technical"></a>
<h2>Technical resources</h2>
<p>
  The SMP software to be used can be obtained from the 
  <a href="https://joinup.ec.europa.eu/software/cipaedelivery/description">CIPA e-Delivery</a>
  project maintained by the European Commission and hosted on
  <a href="https://joinup.ec.europa.eu/">joinup</a>.
  The <strong>sources</strong> reside in a publicly accessible 
  <a href="https://joinup.ec.europa.eu/svn/cipaedelivery/">Subversion repository</a>
  whereas the <strong>binary resources</strong> can be obtained from a
  <a href="https://joinup.ec.europa.eu/nexus/content/repositories/releases/">Nexus instance</a>.
</p>

<p>
  The technical SMP resources are divided into the following elements: 
</p>

<ul>
  <li><code>smp-webapp</code> - The SMP server that offers the query service. This server exists in two versions: one that supports only reading and one that supports reading and writing.</li>
  <li><code>smp-client-library</code> - An SMP client library to be used to access any SMP server.</li>
  <li><code>smp-client-console</code> - An SMP console client for querying the SMP from the commandline.</li>
</ul>

<p>
  All of the components are available as ready-to-use Eclipse projects.
  The easiest way to build the projects is therefore to import the projects into Eclipse.
</p>
<p>  
  Hint when using Eclipse: it is best to close the project in Eclipse when a commandline 
  build is performed because otherwise Eclipse might want to refresh while the console 
  build is in progress. After the build finished you may re-open the project in Eclipse
  and clean it there again, because the Eclipse compiler and the Oracle console compiler 
  produce incompatible byte code for enum classes!
</p>

<a name="smpwebapp"></a>
<h2>smp-webapp</h2>
<p>
  This is the main SMP server application. It is provided as a Java web application that can be deployed
  in an application server like Apache Tomcat or Jetty.
  This section assumes that you are using the complete SMP with read and write API.
  The respective CIPA project is called <code>cipa-smp-full-webapp</code>.
  The latest version 2.2.3 can be found in the Joinup Subversion repository at
  <a href="https://joinup.ec.europa.eu/svn/cipaedelivery/tags/2.2.3/cipa-smp-full-webapp"><code>https://joinup.ec.europa.eu/svn/cipaedelivery/tags/2.2.3/cipa-smp-full-webapp</code></a>. 
</p>

<p>
  The SMP service has been implemented as a REST interface with a database backend.
  It is possible to change the backend, but the following description is based on a database backend.
  A copy of the MySQL database initialization script can be found in the 
  <code>/src/etc/database_backups/</code> folder of the <code>cipa-smp-server-library</code> project.
  By default a user <code>peppol_user</code> with the password <code>Test1234</code> is created!
</p>

<p>
  The service can be deployed in two ways:
</p>

<ul>
  <li>
    Compiling the project on the command line using <kbd>mvn clean install</kbd>. 
    The result is a WAR file in the <code>target</code> folder and additionally an exploded 
    version of the WAR file in the <code>target/cipa-smp-full-webapp-x.y.z</code> directory
    (where x.y.z denotes the version number).
  </li>
  <li>
    Start the application <code>src/test/java/at/peppol/smp/server/jetty/RunInJettySMP</code> from within Eclipse.
    Than the application will be running on localhost port 80 and can be accessed with a browser or an SMP client.
  </li>
</ul>

<p>
  <a href="https://metro.java.net/2.2.1-1/">Metro 2.2.1-1</a> must be installed on the application server 
  for the service to work since it makes use of the SML management client.
</p>

<div class="alert alert-info">  
  Note that the SMP service MUST be deployed as the <code>ROOT</code> web application (at path "/") on 
  the application server, since this is a prerequisite in the DNS lookup scheme. 
  Furthermore it MUST be deployed on port 80 (standard http port) and may not use SSL to secure the transport.
</div>

<a name="configuring"></a>
<h3>Configuring the service</h3>
<p>
  The service is configured using a single configuration file 
  <code>src/main/resources/config.properties</code>. 
  The following list describes all the possible configuration items:
</p>
<ul>
  <li>
    <strong><code>dataManager.class</code></strong>:
    The data manager implementation to use. 
    The data manager is for retrieving the data to use in the REST service. 
    The default class is <code>eu.europa.ec.cipa.smp.server.data.dbms.DBMSDataManager</code>.
  </li>
  <li>
    <strong><code>registrationHook.class</code></strong>:
    The type of registration hook to use. 
    The hook is used for notifying the SML of the creation or deletion of business identifiers. 
    For testing purposes you may use the class <code>eu.europa.ec.cipa.smp.server.hook.DoNothingRegistrationHook</code>
    which does not communicate with the SML. 
    For production use the class <code>eu.europa.ec.cipa.smp.server.hook.RegistrationServiceRegistrationHook</code>
    must be used, as it communicates with the SML and adds, updates or deletes participant DNS entries.
  </li>
  <li>
    <strong><code>regServiceRegistrationHook.id</code></strong>:
    The SMP ID to use when using the SML interface.<br /> 
    Note: it must be the same ID that was used for the initial registration of the SMP to the SML.<br />
    Note: is only required if class <code>RegistrationServiceRegistrationHook</code> is used.
  </li>
  <li>
    <strong><code>regServiceRegistrationHook.regLocatorUrl</code></strong>:
    The URL of the SML manage business identifier service. 
    For production purposes (SML) use <code>https://sml.peppolcentral.org/manageparticipantidentifier</code>. 
    For the test-SML (SMK) use the URL <code>https://smk.peppolcentral.org/manageparticipantidentifier</code>.<br />
    Note: is only required if class <code>RegistrationServiceRegistrationHook</code> is used.<br />
    Note: this is the field that needs to be changed for the <a href="/public/menuitem-docs-sml-migration">SML migration</a> on June 9<sup>th</sup> 2015!
  </li>
  <li>
    <strong><code>regServiceRegistrationHook.keystore.classpath</code></strong>: 
    The classpath - relative to the project - where the Java key store (of type JKS) with the SMP 
    certificate is located. 
    An empty directory <code>src/main/resources/keystore</code> is present which could contain the key store. 
    In this case the properties entry should start with <code>keystore/</code>.<br />
    Note: The key store should contain exactly one certificate entry with an arbitrary name and the certificate must have the same password as the whole key store!<br />
    Note: is only required if class <code>RegistrationServiceRegistrationHook</code> is used.
  </li>
  <li>
    <strong><code>regServiceRegistrationHook.keystore.password</code></strong>:
    The password used to access the key store.<br />
    Note: is only required if class <code>RegistrationServiceRegistrationHook</code> is used.
  </li>
  <li>
    <strong><code>xmldsig.keystore.classpath</code></strong>:
    Has the same semantics as <code>regServiceRegistrationHook.keystore.classpath</code> and should 
    therefore have the same value.
  </li>
  <li>
    <strong><code>xmldsig.keystore.password</code></strong>:
    Has the same semantics as <code>regServiceRegistrationHook.keystore.password</code> and should 
    therefore have the same value.
  </li>
  <li>
    <strong><code>xmldsig.keystore.key.alias</code></strong>:
    The alias of the key within the key store. Is case sensitive and may not be empty.
  </li>
  <li>
    <strong><code>xmldsig.keystore.key.password</code></strong>:
    The password of the certificate with the above specified alias.
    Should be the same as the password of the whole key store (see <code>xmldsig.keystore.password</code>).
  </li>
  <li>
    <strong><code>jdbc.driver</code></strong>:
    The JDBC driver class to be used by JPA. For MySQL use com.mysql.jdbc.Driver
  </li>
  <li>
    <strong><code>jdbc.url</code></strong>:
    The JDBC URL of the database to connect to. 
    For a local MySQL database called "smp" the string would look like this: 
    <code>jdbc:mysql://localhost/smp?autoReconnect=true</code><br />
    Note: the URL depends on the JDBC driver used!
  </li>
  <li>
    <strong><code>jdbc.user</code></strong>:
    The database user to be used when connecting to the database.
  </li>
  <li>
    <strong><code>jdbc.password</code></strong>:
    The password of the JDBC user to be used when connecting to the DB
  </li>
  <li>
    <strong><code>target-database</code></strong>:
    The JPA target database type to be used. For MySQL this value should be <code>MySQL</code><br />
    Note: Please see the documentation of EclipseLink for other target database systems!
  </li>
  <li>
    <strong><code>jdbc.read-connections.max</code></strong>:
    The maximum number of JDBC connections to be used for reading.
    Usually 10 should be suitable for most use cases.
  </li>
</ul>

<p>
  Example of a development <code>config.properties</code> file using a local MySQL database 
  called <code>smp</code> without an SML connector (for easy testing):
</p>

<p>
  <pre>
## DBMS handler
dataManager.class=eu.europa.ec.cipa.smp.server.data.dbms.DBMSDataManager

## Registration callback (SML client caller)
registrationHook.class=eu.europa.ec.cipa.smp.server.hook.DoNothingRegistrationHook

## XMLDSIG response signing:
xmldsig.keystore.classpath    = keystore/keystore.jks
xmldsig.keystore.password     = peppol
xmldsig.keystore.key.alias    = smp keypair
xmldsig.keystore.key.password = peppol

## JDBC configuration for DB
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost:3306/smp
jdbc.user = smp
jdbc.password = smp
target-database = MySQL
jdbc.read-connections.max = 10</pre>
</p>

<p>
  Example of a production-like <code>config.properties</code> file using a local MySQL database 
  called <code>smp</code> with the SML connector (for close to production):
</p>

<p>
  <pre>
## DBMS handler
dataManager.class=eu.europa.ec.cipa.smp.server.data.dbms.DBMSDataManager

## Registration callback (SML client caller)
registrationHook.class=eu.europa.ec.cipa.smp.server.hook.RegistrationServiceRegistrationHook

# SMP ID
regServiceRegistrationHook.id=TEST-SMP-ID1
# SML URL (incl. the service name)
regServiceRegistrationHook.regLocatorUrl=https://sml.peppolcentral.org/manageparticipantidentifier
regServiceRegistrationHook.keystore.classpath = keystore/keystore.jks
regServiceRegistrationHook.keystore.password  = peppol

## XMLDSIG response signing:
xmldsig.keystore.classpath    = keystore/keystore.jks
xmldsig.keystore.password     = peppol
xmldsig.keystore.key.alias    = smp keypair
xmldsig.keystore.key.password = peppol

## JDBC configuration for DB
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost:3306/smp
jdbc.user = smp
jdbc.password = smp
target-database = MySQL
jdbc.read-connections.max = 10</pre>
</p>

<div class="alert alert-info">
  Note: since the default Java properties file handling is used to read the configuration 
  file recall that trailing whitespaces of a property name and leading white spaces of a 
  property value are automatically skipped. Trailing whitespaces of a property value are not skipped!
</div>

<a name="publicapi"></a>
<h3>Public REST API</h3>
<p>
  The service is implemented as a REST interface using the <a href="http://jersey.java.net/">Jersey framework</a>.
  See the SMP specification for details on the intention of the REST URL paths.
</p>
<p>
  The implementation contains four main REST classes, one for each path for which one can make queries:
</p>
<ul>
  <li>
    <code>/{ServiceGroupId}</code>
    is implemented in the <code>eu.europa.ec.cipa.smp.server.services.readwrite.ServiceGroupInterface</code> class.
  </li>
  <li>
    <code>/{ServiceGroupId}/services/{DocumentTypeId}</code>
    is implemented in the <code>eu.europa.ec.cipa.smp.server.services.readwrite.ServiceMetadataInterface</code> class.
  </li>
  <li>
    <code>/list/{UserId}</code>
    is implemented in the <code>eu.europa.ec.cipa.smp.server.services.common.ListInterface</code> class.
  </li>
  <li>
    <code>/complete/{ServiceGroupId}</code>
    is implemented in the <code>eu.europa.ec.cipa.smp.server.services.common.CompleteServiceGroupInterface</code> class.
  </li>
</ul>
<p>
  The <code>list</code> interface is not part of the SMP specification and is used for getting a 
  list of registered service groups for a given user. 
  The <code>complete</code> interface is also not part of the specification and is used for getting 
  the service group as well as all the service metadata for that group in a single call.
  Further the <code>PUT</code> and <code>DELETE</code> operations have also been implemented for 
  <code>ServiceGroupInterface</code> and <code>ServiceMetadataInterface</code>.
  These four interfaces make use of the <code>eu.europa.ec.cipa.smp.server.data.IDataManager</code>
  interface to access the SMP data. 
  The implementation currently contains one implementation of this interface which has a database 
  as the underlying data source. 
  The database version of the interface is implemented in the class 
  <code>eu.europa.ec.cipa.smp.server.data.dbms.DBMSDataManager</code> 
  and makes use of JPA (EclipseLink) for the main database access.
</p>

<a name="modifyingapi"></a>
<h3>Modifying REST API</h3>
<p>
  Some REST APIs are used to modify data within the SMP.
  Those APIs are not standardized by the PEPPOL SMP specifications and therefore are described here.
  All modifying REST APIs are either using HTTP <code>PUT</code> or HTTP <code>DELETE</code> for 
  creating/updating or for deleting elements.
  As the SMP itself running without transport security these modifying methods require an HTTP BasicAuth header.
</p>
<div class="alert alert-info">  
  Note: to send an HTTP Basic Auth header you must provide an HTTP header called 
  <code>Authorization</code> with a value like created by the following pseudo code:
  <code>"Basic " + Base64.encode (userName + ":" + password)</code>
</div>
<p>
  Please see chapter on <a href="#security">security considerations</a> how to handle BasicAuth proper and secure.
</p>

<p>
  A Java EE Filter is used for reverting changes to the SML, if the change to the SMP fails. 
  If a HTTP status code different from 200 (OK) is returned from the REST interface, 
  then the corresponding change made to the SML is reverted. This functionality is 
  implemented in the class <code>eu.europa.ec.cipa.smp.server.hook.PostRegistrationFilter</code>.
</p>
<p>  
  A Jersey Filter has been added for generating the XML-DSIG element which is part of the 
  response from a GET on Service Metadata interface. 
  This is implemented in the class <code>eu.europa.ec.cipa.smp.server.util.SignatureFilter</code>.
</p>

<ul>
  <li>
    <code>ServiceGroupInterface</code>
    <ul>
      <li>
        <code>PUT /{ServiceGroupId}</code><br />
        Expected body: A <code>ServiceGroupType</code> object as specified by the SMP XSD<br />
        Description: create a new service group
      </li>
      <li>
        <code>DELETE /{ServiceGroupId}</code><br />
        Expected body: none<br />
        Description: Delete the whole service group with the specified service group ID. 
        Implicitly deletes all related elements as well
      </li>
    </ul>
  </li>
  <li>
    <code>ServiceMetadataInterface</code>
    <ul>
      <li>
        <code>PUT /{ServiceGroupId}/services/{DocumentTypeId}</code><br />
        Expected body: A <code>ServiceMetadataType</code> object as specified by the SMP XSD<br />
        Description: Define the AP endpoint URL etc. for a certain participant and a certain document type
      </li>
      <li>
        <code>DELETE /{ServiceGroupId}/services/{DocumentTypeId}</code><br />
        Expected body: none<br />
        Description: Delete all participant information for the specified document type
      </li>
    </ul>
  </li>
</ul>

<a name="security"></a>
<h3>Security considerations</h3>
<p>
  As the SMP is publicly available on HTTP port 80 and does not require a client certificate 
  or anything the like it especially the modifying actions (HTTP <code>PUT</code> and <code>DELETE</code>)
  must be handled with special care to avoid man in the middle attacks.
  Even though HTTP BasicAuth is used this is not really added security, as the username and password 
  are only Base64 encoded - which is easily decodable - and are therefore vulnerable to 
  Man in the Middle attacks.
</p>
<p>
  The recommended scenario is to <em>additionally</em> configure the SMP to run on HTTPS (on any port other than 80), 
  and do the modifying actions only via HTTPS. BasicAuth is required anyway but the data is not 
  readable by third-parties because of the underlying transport security.
  This is something that is currently technically not available but should be used as a convention 
  when running an SMP with this implementation.
  For a future release it may be of value when the modifying actions are presented with a separate 
  path prefix (e.g. <code>/secure</code>) which can than easily be used to forward all HTTP request 
  on <code>/secure/*</code> to HTTPS automatically.
</p>
 
<a name="initialization"></a>
<h3>Initialization</h3>
 
<p>
 Now that your new SMP server is up and running, you should perform some setup tasks.
</p>
 
<ul>
  <li>
    Change the default user <code>peppol_user</code> with the default password <code>Test1234</code> 
    to something more complex! This can be easily achieved by altering the content of the database
    table <code>smp_user</code> manually. After this change, simply provide the new credentials for
    writing operations.
  </li>
  <li>
    The SMP must be registered at the SML.
    For this purpose an <a href="/public/menuitem-tools-smp-sml">online tool</a> is integrated in this page to perform this task.
  </li>
</ul>

<a name="smpclientlibrary"></a>
<h2>smp-client-library</h2>

<p>
  This is the default Java library to query any SMP server (that is compliant to the specifications)
  for participant information. The client library has the sole purpose to provide reusable functionality. 
  It does not offer executable functionality itself.
</p>
 
<p>
  The <code>eu.europa.ec.cipa.smp.client.SMPServiceCaller</code> is the main class when using the library.
  The class contains methods for reading, saving and deleting both service groups and service metadata, 
  as well as listing the service groups of a given user. 
  The writing methods of this class can only be used in conjunction with the CIPA SMP server as for 
  different implementation the write access may have been implemented in a different way.
  Alternatively the class <code>eu.europa.ec.cipa.smp.client.SMPServiceCallerReadonly</code> can be used
  to access any SMP that complies to the SMP specifications.
  The library contains both static and non-static methods for performing all of these actions. 
  The class is documented using JavaDoc.
</p>
<p>
  The following is an example code of getting a service metadata object of a service group (participant) 
  for a certain document type:
</p>
<p>
  <pre>
// ServiceGroup = participant identifier; GLN = 0088
final ParticipantIdentifierType aServiceGroupID = EPredefinedIdentifierIssuingAgency.GLN.createParticipantIdentifier ("5798000000001");
// Document type identifier from enumeration
final DocumentIdentifierType aDocumentTypeID = EPredefinedDocumentTypeIdentifier.INVOICE_T010_BIS4A_V20.getAsDocumentTypeIdentifier ();
// Main call to the SMP client with the correct SML to use
final SignedServiceMetadataType aMetadata = new SMPServiceCallerReadonly (aServiceGroupID, ESMP.PRODUCTION).getServiceRegistrationOrNull (aServiceGroupID, aDocumentTypeID);
if (aMetadata == null)
{
  // No such metadata
}
else
{
  // Evaluate metadata
}</pre>
</p>
 
<a name="smpclientconsole"></a>
<h2>smp-client-console</h2>
 
<p>
  This is a Java application that uses the <a href="#smpclientlibrary">smp-client-library</a> to
  allow for SMP querying from the commandline.
  It can be executed on its own and also serves as an example on how to use the SMP client API.
</p>

<p>
  It provides the following command line parameter:
</p>

<table class="table">
  <thead>
    <tr>
      <th>Parameter</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>-c COMMAND</td>
      <td>The command to execute. Must be one of the following (case insensitive):
        <ul>
          <li><code>addgroup</code> - create a new service group</li>
          <li><code>delgroup</code> - delete a service group</li>
          <li><code>add</code> - create a new service registration</li>
          <li><code>del</code> - delete a service registration</li>
          <li><code>list</code> - list all registrations for the given user name</li>
        </ul>
      </td>
    </tr>
    <tr>
      <td>-h HOST</td>
      <td>URL of the SMP host to work on</td>
    </tr>
    <tr>
      <td>-u USERNAME</td>
      <td>The username for the SMP</td>
    </tr>
    <tr>
      <td>-p PASSWORD</td>
      <td>The password for the SMP</td>
    </tr>
    <tr>
      <td>-b BUSINESSID</td>
      <td>
        The participant ID of the business to handle. 
        Must be in the PEPPOL specific format, without the common prefix. 
        For example <code>0088:123456</code> would be a valid identifier.<br />
        Only required for the following commands: addgroup, delgroup, add, del
      </td>
    </tr>
    <tr>
      <td>-a APURL</td>
      <td>
        The URL of the AccessPoint to register.<br />
        Only required for the following commands: add
      </td>
    </tr>
    <tr>
      <td>-e PEMFILE</td>
      <td>
        File containing the Base64 encoded, DER encoded AP certificate (public key only).<br />
        Only required for the following commands: add
      </td>
    </tr>
    <tr>
      <td>-r PROCESSID</td>
      <td>
        Process ID to perform operation on.<br />
        Only required for the following commands: add
      </td>
    </tr>
    <tr>
      <td>-d DOCUMENTTYPEID</td>
      <td>
        Document type ID to perform operation on.<br />
        Only required for the following commands: add, del
      </td>
    </tr>
  </tbody>
</table> 