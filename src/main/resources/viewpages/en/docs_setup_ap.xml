<!--

    Copyright (C) 2014-2015 Philip Helger (www.helger.com)
    philip[at]helger[dot]com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<p>
  This page explains how to setup an OpenPEPPOL AS2 AccessPoint from scratch.
  AP is the abbreviation for <em>Access Point</em> which is the technical endpoint for
  sending and receiving business documents.
</p>

<p>
  There are three known possibilities (I'm aware of) on how to build an AS2 AccessPoint.
  The first one is using the <em>cipa-dispatcher</em> project which is part of the
  <a href="https://joinup.ec.europa.eu/software/cipaedelivery/description">CIPA e-Delivery</a>
  project maintained by the European Commission. It is a Mendelson frontend and therefore
  requires Mendelson to be setup besides CIPA.
  The second possibility is to use <a href="https://github.com/difi/oxalis">Oxalis</a> as the
  software of choice. And the third solution - the one described in this document - is the
  usage of my <a href="https://github.com/phax/as2-lib">as2-lib</a> as the AS2 communication
  channel and <a href="https://github.com/phax/as2-peppol-servlet">as2-peppol-servlet</a>
  for receiving AS2 messages within a standard Java servlet. By default no external AS2 software
  is required for this solution, so I'm presenting a fully self-contained Open Source solution. 
</p>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Table of contents</h3>
  </div>
  <div class="panel-body">
    <ol>
      <li><a href="#prerequisites">Prerequisites</a></li>
      <li><a href="#messagestructure">AS2 Message structure</a>
        <ol>
          <li><a href="#msimplementation">Implementation</a></li>
        </ol>
      </li>
      <li><a href="#as2receiver">AS2 AccessPoint receiver</a></li>
      <li><a href="#as2sender">AS2 AccessPoint sender</a></li>
    </ol>
  </div>
</div>

<a name="prerequisites"></a>
<h2>Prerequisites</h2>
<p>
  Before you can start you need to have the following information in place:
</p>
<ol>
  <li>As the very first step you need to sign the TIAs (Transport Infrastructure Agreements) with 
      <a href="http://www.peppol.eu/about_peppol/copy_of_how-to-join">OpenPEPPOL AISBL</a></li>
  <li>Afterwards you need to apply for an <em>AP certificate</em> at OpenPEPPOL. 
      This certificate is required to run the AP.</li>
  <li>At least one of the default PEPPOL BIS v2 (processes) must be implemented (according to the TIAs).
      A list of
      <a href="http://www.peppol.eu/ressource-library/technical-specifications/post-award/mandatory">all available BISs</a>
      is available on the PEPPOL website.  
  </li>
  <li>You should have a look at the 
      <a href="http://www.peppol.eu/ressource-library/technical-specifications/infrastructure-resources">official PEPPOL AS2 specification</a>.
  </li>
  <li>You should have a look at the 
      <a href="http://www.peppol.eu/ressource-library/technical-specifications/infrastructure-resources">official PEPPOL Envelope specification</a>
      (SBDH).
  </li>
  <li>You should be familiar with Java 1.6+</li>
  <li>Basic knowledge about Apache Tomcat (and optionally a web server) should be present</li>
</ol>

<a name="messagestructure"></a>
<h2>AS2 Message structure</h2>
<p>
  An AccessPoint is a technical adapter for sending and receiving PEPPOL UBL documents.
  The following images shows the overall structure of a transmitted AS2 message in a very
  simplified way:
</p>
<p>
  <img src="../imgs/ap-message-structure.png" alt="PEPPOL AS2 message structure" />
</p>
<p>
  The outermost container is an <a href="http://en.wikipedia.org/wiki/S/MIME">S/MIME</a> 
  (Secure / Multipurpose Internet Mail Extensions) message.
  It is a basic MIME message including signature data.
  One MIME part of the message is the so called
  <a href="http://www.uncefactforum.org/ATG/atg_news_download.htm">Standard Business Document Header</a>
  (SBDH).
  It is a UN/CEFACT standard for merging XML documents with relevant metadata into a single XML document.
  PEPPOL maintains its own 
  <a href="http://www.peppol.eu/ressource-library/technical-specifications/infrastructure-resources">Envelope specification</a>
  that is based on SBDH.
  Finally inside the SBDH the main UBL business document is contained.
  The complete <a href="http://docs.oasis-open.org/ubl/os-UBL-2.1/UBL-2.1.zip">UBL 2.1</a> specifications
  can be downloaded from the <a href="https://www.oasis-open.org/committees/ubl/">OASIS UBL</a> web site. 
</p>

<a name="msimplementation"></a>
<h3>Implementation</h3>
<p>
  This section points to projects that help in implementing the different layers of an AS2 message.
  If you are already familiar with these concepts you may simply skip this section.
</p>

<ul>
  <li>
    <strong>S/MIME</strong>: to read and write S/MIME messages 
    <a href="http://bouncycastle.org/">The Legion of the Bouncy Castle</a> 
    provides tools for it.
    It is <a href="http://bouncycastle.org/licence.html">licensed under an MIT-like license</a>.
    The latest version 1.51 is used within <em>as2-lib</em> for S/MIME handling.
    The relevant Maven artefacts are:
    <pre>
    &lt;dependency&gt;
      &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;
      &lt;artifactId&gt;bcmail-jdk15on&lt;/artifactId&gt;
      &lt;version&gt;1.51&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;
      &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;
      &lt;version&gt;1.5.2&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;javax.activation&lt;/groupId&gt;
          &lt;artifactId&gt;activation&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;</pre>
    Note: the <code>activation</code> artefact is excluded from <code>javax.mail</code> because
    when using JDK 6 the activation package is already contained in the Java runtime.
  </li>
  <li>
    <strong>SBDH</strong>: to read an write SBDH messages I created a Java library called
    <a href="https://github.com/phax/ph-sbdh">ph-sbdh</a> which uses JAXB generated objects.
    Additionally the Java library <a href="https://github.com/phax/peppol-sbdh">peppol-sbdh</a>
    can be used on top of <em>ph-sbdh</em> as it adds the PEPPOL specific requirements. 
    Both libraries are licensed under the Apache 2.0 license.
    The relevant Maven artefacts are:
    <pre>
    &lt;dependency&gt;
      &lt;groupId&gt;com.helger&lt;/groupId&gt;
      &lt;artifactId&gt;ph-sbdh&lt;/artifactId&gt;
      &lt;version&gt;1.1.0&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.helger&lt;/groupId&gt;
      &lt;artifactId&gt;peppol-sbdh&lt;/artifactId&gt;
      &lt;version&gt;1.0.0&lt;/version&gt;
    &lt;/dependency&gt;</pre>
  </li>
  <li>
    <strong>UBL 2.1</strong>: to read an write UBL messages I created a Java library called
    <a href="https://github.com/phax/ph-ubl">ph-ubl</a> which uses JAXB generated objects.
    This library is licensed under the Apache 2.0 license.
    The relevant Maven artefacts are:
    <pre>
    &lt;dependency&gt;
      &lt;groupId&gt;com.helger&lt;/groupId&gt;
      &lt;artifactId&gt;ph-ubl&lt;/artifactId&gt;
      &lt;version&gt;3.3.0&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;com.helger&lt;/groupId&gt;
          &lt;artifactId&gt;ph-ubl20&lt;/artifactId&gt;
        &lt;/exclusion&gt;
        &lt;exclusion&gt;
          &lt;groupId&gt;com.helger&lt;/groupId&gt;
          &lt;artifactId&gt;ph-ubl20-codelists&lt;/artifactId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;</pre>
    Note: the <code>ph-ubl20</code> and <code>ph-ubl20-codelists</code> artefacts 
    can be excluded from <code>ph-ubl</code> because OpenPEPPOL only deals with
    UBL 2.1 artefacts. If you also want to deal with UBL 2.0 files, remove everything
    from <code>&lt;exclusions&gt;</code> until <code>&lt;/exclusions&gt;</code>.
  </li>
</ul>

<a name="as2receiver"></a>
<h2>AS2 AccessPoint receiver</h2>
<p>
  An example project that shows how to receive PEPPOL documents via AS2 can be found 
  in the <strong><a href="https://github.com/phax/as2-peppol-server">as2-peppol-server</a></strong> project.
  It uses <a href="https://github.com/phax/as2-lib">as2-lib</a>,
  <a href="https://github.com/phax/ph-ubl">ph-ubl</a> and
  <a href="https://github.com/phax/peppol-sbdh">peppol-sbdh</a> to receive messages from arbitrary
  PEPPOL AS2 receivers. It requires no external AS2 handler and no mandatory database setup. 
  <em>as2-peppol-server</em> is a Java 1.6+ project and licensed under Apache 2.0 license.
</p>

<p>More description to follow</p>

<a name="as2sender"></a>
<h2>AS2 AccessPoint sender</h2>
<p>
  An example project that shows how to send PEPPOL documents via AS2 can be found 
  in the <strong><a href="https://github.com/phax/as2-peppol-client">as2-peppol-client</a></strong> project.
  It uses <a href="https://github.com/phax/as2-lib">as2-lib</a>,
  <a href="https://github.com/phax/ph-ubl">ph-ubl</a> and
  <a href="https://github.com/phax/peppol-sbdh">peppol-sbdh</a> to send messages to arbitrary
  PEPPOL AS2 receivers.
  <em>as2-peppol-client</em> is a Java 1.6+ project and licensed under Apache 2.0 license.
</p>

<p>
  The steps to send a document are outlined as follows:
</p>

<ol>
  <li>As a prerequisite, you need to know the following things:
    <ol>
      <li>The <strong>UBL document</strong> to be send. How you create your UBL file is out of scope!</li>
      <li>
        The <strong>PEPPOL participant ID of the receiver</strong> (e.g. <code>0088:test</code>). 
        The determination of the recipient ID is not in scope for PEPPOL!
      </li>
      <li>
        Your <strong>PEPPOL sender participant ID</strong>. There is no fixed way how to determine this.
        If you are registered as a PEPPOL recipient, than please use your recipient ID as your
        sender ID. If you are not registered as a sender have a look at the 
        <a href="http://www.peppol.eu/ressource-library/technical-specifications/infrastructure-resources">PEPPOL policy for use of identifiers</a>
        beneath <em>POLICY 8</em> and search the VAT scheme suitable for your country (at the end of the list).
        Assuming you are from San Marino and your VAT number is <em>123456</em> than use the following 
        sender ID: <code>9951:123456</code>.   
      </li>
      <li>
        You need to know the <strong>PEPPOL document type identifier</strong> and 
        <strong>PEPPOL process identifier</strong> in which you want to send the document.
        If you are unsure what document type and process the receiver supports you can use the
        <a href="/public/menuitem-tools-participant">Participant information tool</a>
        contained in this page to determine the details.         
      </li>
      <li>
        You need to have a valid <strong>PEPPOL AP certificate</strong> for sending documents to 
        the PEPPOL network.
      </li>
    </ol>
  </li>
  <li>
    Perform an SMP lookup on the recipient ID and the document type ID to retrieve a list
    of all endpoints and extract the one using the <em>transportProfile</em>
    <code>busdox-transport-as2-ver1p0</code>.
    From this endpoint use <em>EndpointReference</em> as the destination URL and
    also remember the certificate of the recipient. It is later needed to extract the
    <em>as2-to</em> ID.
  </li>
  <li>
    Next thing to do is to create an SBDH document. Using the 
    <a href="https://github.com/phax/ph-sbdh">ph-sbdh</a> library this can be
    performed in very few steps:
    <ol>
      <li>
        Create an instance of <code>com.helger.peppol.sbdh.DocumentData</code> which is filled with
        the UBL document, the sender participant ID, the receiver participant ID, the document type
        ID and the process ID (all stated in the prerequisites above).
      </li>
      <li>
        Convert the <code>DocumentData</code> to a <code>StandardBusinessDocument</code> using
        the <code>DocumentDataWriter</code> utility class.
      </li>
    </ol>
  </li>
  <li>
    For setting up the AS2 client request some additional input is needed:
    <ol>
      <li>
        A PKCS12 keystore containing your PEPPOL AP certificate.
        If you only have a JKS keystore, you can easily convert it to a PKCS12 keystore
        using the great <a href="http://portecle.sourceforge.net/">Portecle</a> tool
        by <em>exporting</em> the certificate and the public key. You need to enter
        a password for the newly created keystore upon export. 
      </li>
      <li>
        The password to access the PKCS12 keystore.
      </li>
      <li>
        Your AS2 ID (<em>as2-from</em>), which must be the common name of your PEPPOL AP certificate subject
        (e.g. <code>APP_1000000001</code>).
      </li>
      <li>
        The alias of the certificate in the PKCS12 keystore to be used. 
        Ideally it is equal to your AS2 ID for easy matching but this is just an idea.
      </li>
      <li>
        The AS2 ID of the receiver (<em>as2-to</em>), which must be the common name of the recipients PEPPOL AP 
        certificate subject (e.g. <code>APP_1000000002</code>) received via the previous SMP lookup.
      </li>
      <li>
        The public key of the receiver as an X.509 certificate.
        This is exactly the certificate received from the previous SMP lookup. 
      </li>
    </ol>
  </li>
  <li>
    Finally the AS2 message can be send synchronously and the MDN can be received synchronously.
  </li>
</ol>
