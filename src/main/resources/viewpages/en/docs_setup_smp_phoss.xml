<!--

    Copyright (C) 2014-2022 Philip Helger (www.helger.com)
    philip[at]helger[dot]com

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<p>
  This page explains how to setup my implementation (phoss SMP) of an PEPPOL SMP from scratch.
  SMP is the abbreviation for <em>Service Metadata Publisher</em> which is the decentralized
  directory service (registry) of OpenPEPPOL.
  SMPs are normally only operated by Service Providers and not by end users.
  An SMP contains information about the endpoints of receivers - the URLs where to send the main
  documents to.
  The information within the SMP is structured by participant ID, document type ID and process ID.  
</p>

<p>
  phoss SMP is a fork of the CIPA e-Delivery SMP components on version 2.2.3 back in 2015.
  The goal is to keep the implementation simple and provide publicly available PEPPOL components
  to the world. An additional goal was to make the configuration as simple as possible.
  Please read the official <a href="https://github.com/phax/phoss-smp/wiki">phoss SMP Wiki</a> for
  all the details.
</p>

<div class="card">
  <div class="card-header">
    Table of contents
  </div>
  <div class="card-body">
    <ol>
      <li><a href="#prerequisites">Prerequisites</a></li>
      <li><a href="#technical">Technical resources</a></li>
      <li><a href="#smpserver">SMP server application</a>
        <ol>
          <li><a href="#configuring">Configuring the service</a></li>
          <li><a href="#security">Security considerations</a></li>
          <li><a href="#initialization">Initialization</a></li>
        </ol>
      </li>
      <li><a href="#smpclient">SMP client</a></li>
    </ol>
  </div>
</div>

<a name="prerequisites"></a>
<h2>Prerequisites</h2>
<p>
  Before you can start you need to have the following information in place:
</p>
<ol>
  <li>As the very first step you need to sign the TIAs (Transport Infrastructure Agreements) with 
      <a href="https://peppol.eu/get-involved/join-openpeppol/">OpenPEPPOL AISBL</a></li>
  <li>Afterwards you need to apply for an <em>SMP certificate</em> at OpenPEPPOL. 
      This certificate is required to run the SMP.</li>
  <li>You should have a look at the 
      <a href="https://peppol.eu/downloads/the-peppol-edelivery-network-specifications/">official SMP specifications</a>.
      It is important to understand that the specifications only specify the reading access
      to an SMP but not the writing access. Nevertheless the implementation discussed here
      also contains the possibility to write new entries.</li>
  <li>You should be familiar with Java 1.8+</li>
  <li>When using the SMP server implementation with a database backend
      basic knowledge of a relational database (e.g. MySQL) is required. 
      Alternatively a filesystem based XML backend is also available.</li>
  <li>Basic knowledge about Apache Tomcat or Jetty (and optionally a web server) should be present</li>    
</ol>

<a name="technical"></a>
<h2>Technical resources</h2>

<p>
  My phoss SMP server implementation is located on GitHub at
  <a href="https://github.com/phax/phoss-smp">phax/phoss-smp</a>. It contains
  the source code and a 
  <a href="https://github.com/phax/phoss-smp/wiki">Wiki</a>
  with the relevant documentation.
  The SMP server uses shared components also available on GitHub:
  <a href="https://github.com/phax/peppol-commons">peppol-commons</a> 
  - a common library with shared PEPPOL components containing e.g. an SMP client library
  and an SML client library.
</p>

<p>
  The <strong>sources</strong> and the <strong>binary resources</strong> are
  available on GitHub: 
  <ul>
    <li><a href="https://github.com/phax/phoss-smp/releases">https://github.com/phax/phoss-smp/releases</a></li>
  </ul>
</p>

<p>
  Pre-build <strong>Docker</strong> images are available on hub.docker.com: 
  <ul>
    <li><a href="https://hub.docker.com/r/phelger/smp/">https://hub.docker.com/r/phelger/smp/</a></li>
  </ul>
</p>

<p>
  See <a href="https://github.com/phax/phoss-smp/wiki/Source">https://github.com/phax/phoss-smp/wiki/Source</a>
  for the description of the different source modules. 
  All of the components are available as ready-to-use Maven projects.
</p>

<p>  
  Hint when using Eclipse: it is best to close the project in Eclipse when a commandline 
  build is performed because otherwise Eclipse might want to refresh while the console 
  build is in progress. After the build finished you may re-open the project in Eclipse
  and clean it there again, because the Eclipse compiler and the Oracle console compiler 
  produce incompatible byte code for enumeration classes!
</p>

<a name="smpserver"></a>
<h2>phoss-smp-webapp-[mongodb|sql|xml]</h2>
<p>
  This is the main SMP server application logic.
  It is provided as a Java web application that can be deployed in an application server 
    like Apache Tomcat or Jetty.
</p>

<p>
  The SMP service has been implemented as a REST interface with a customizable backend that stores the data.
</p>

<ul>
  <li>
    <em>phoss-smp-webapp-sql</em> uses a relational database as its backend.
    A copy of the MySQL database initialization script can be found in the 
    <code>/database_backups/</code> folder of the project.
    By default a user <code>peppol_user</code> with the password <code>Test1234</code> is created!
    The database layout is compatible to the one of the CIPA SMP 2.2.x.
  </li>
  <li>
    <em>phoss-smp-webapp-xml</em> uses XML files as its backend.
    <code>smp-servicegroup.xml</code> stores all the service groups,
    <code>smp-servicemetadata.xml</code> stores all the service metadata associated to the service groups and
    <code>smp-redirect.xml</code> stores all the service redirects related to a service group.
    Additional files for user management etc. are also used.
  </li>
</ul>

<p>
  The application can be deployed in two ways:
</p>

<ul>
  <li>
    Compiling the project on the command line using <kbd>mvn clean install</kbd>. 
    The result is a WAR file in the <code>target</code> folder and additionally an exploded 
    version of the WAR file in the <code>target/phoss-smp-webapp-[sql|xml|mongodb]-x.y.z</code> directory
    (where x.y.z denotes the version number).
  </li>
  <li>
    Run the application <code>src/test/java/com/helger/phoss/smp/standalone/RunInJettySMPSERVER_[SQL|XML|MONGODB]</code> 
    from within your IDE.
    Than the application will be running on localhost port 90 (not 80!) and can be accessed with a browser or an SMP client.
  </li>
</ul>

<div class="alert alert-info">  
  Note that a production SMP service MUST be deployed as the <code>ROOT</code> web application (at path "/") on 
  the application server, since this is a prerequisite in the DNS lookup scheme. 
  Furthermore it MUST be deployed on port 80 (standard http port) and may not use SSL to secure the transport.
</div>

<a name="configuring"></a>
<h3>Configuring the SMP server</h3>
<p>
  The SMP server is configured with two files. One file (<code>webapp.properties</code>) is for the
  customization of the web application and the other file (<code>smp-server.properties</code>) is
  for the SMP functionality itself.
  Additionally a PEPPOL Directory client file (<code>pd-client.properties</code>) may be configured.
  Please read the Wiki page
  <a href="https://github.com/phax/phoss-smp/wiki/Configuration">https://github.com/phax/phoss-smp/wiki/Configuration</a>
  for all configuration options and example files.
</p>

<a name="security"></a>
<h3>Security considerations</h3>

<p>
  Please refer to the Wiki at
  <a href="https://github.com/phax/phoss-smp/wiki/Security">https://github.com/phax/phoss-smp/wiki/Security</a>
  for the best practices on securing the SMP.
</p>
 
<a name="initialization"></a>
<h3>Initialization</h3>
 
<p>
 Now that your new SMP server is up and running, you should perform some setup tasks.
</p>

<ul>
  <li>
    Change the default user <code>admin@helger.com</code> with the default password <code>password</code> 
    to something more complex! This can be easily achieved by logging into the URL <code>http://yourserver/secure</code>
    and use the <em>Change password</em> page to perform the change. 
  </li>
  <li>
    When using the SQL backend, change the default DB user <code>peppol_user</code> with the 
    default password <code>Test1234</code> to something more complex! 
    This can be easily achieved on the management page "DB users" or by altering the content of the database
    table <code>smp_user</code> manually. After this change, simply provide the new credentials for
    writing operations.
  </li>
  <li>
    The SMP must be registered at the SML.
    For this purpose an <a href="/public/menuitem-tools-smp-sml">online tool</a> is integrated in this page to perform this task.
  </li>
</ul>

<a name="smpclient"></a>
<h2>peppol-smp-client</h2>

<p>
  This is the default Java library to query any SMP server (that is compliant to the specifications)
  for participant information. The client library has the sole purpose to provide reusable functionality. 
  It does not offer executable functionality itself.
  The code base of this in a different repository than the SMP server, it is located at
  <a href="https://github.com/phax/peppol-commons">https://github.com/phax/peppol-commons</a>.
</p>
 
<p>
  The <code>com.helger.peppol.smpclient.SMPClient</code> is the main class when using the library.
  The class contains methods for reading, saving and deleting both service groups and service metadata, 
  as well as listing the service groups of a given user. 
  The writing methods of this class can only be used in conjunction with phoss SMP server 
  as for different implementations the write access may have been implemented in a different way (if provided at all).
  Alternatively the class <code>com.helger.peppol.smpclient.SMPClientReadonly</code> can be used
  to access any SMP that complies to the SMP specifications.
  The library contains both static and non-static methods for performing all of these actions. 
  The class is documented using JavaDoc.
</p>

<p>
  Note: the classes <code>SMPClientReadonly</code> and <code>SMPClient</code> can only be used to
  query SMPs that follow the old PEPPOL SMP specification. To query an SMP server that follows
  the OASIS BDXR SMP v1 specification the classes <code>BDXRClientReadonly</code> and
  <code>BDXRClient</code> are provided with a similar API.
</p>

<p>
  The following is an example code of getting a service metadata object of a service group (participant) 
  for a certain document type:
</p>
<p>
  <pre>
    // ServiceGroup = participant identifier; GLN = 0088
    final IParticipantIdentifier aServiceGroupID = EPredefinedIdentifierIssuingAgency.GLN.createParticipantIdentifier ("5798000000001");
    // Document type identifier from enumeration
    final IDocumentTypeIdentifier aDocumentTypeID = EPredefinedDocumentTypeIdentifier.INVOICE_T010_BIS4A.getAsDocumentTypeIdentifier ();
    // Main call to the SMP client with the correct SML to use
    final SignedServiceMetadataType aMetadata = SMPClientReadOnly.getServiceRegistrationByDNS (PeppolURLProvider.INSTANCE,
                                                                                               ESML.DIGIT_TEST,
                                                                                               aServiceGroupID,
                                                                                               aDocumentTypeID);
    if (aMetadata == null)
    {
      // No such metadata
    }
    else
    {
      // Evaluate metadata
    }
  </pre>
</p>
